
#user  nobody;
worker_processes  1;

error_log  /home/nginx-1.4.2/logs/error.log;
#error_log  /home/nginx-1.4.2/logs/error.log  notice;
#error_log  /home/nginx-1.4.2/logs/error.log  info;

#pid        logs/nginx.pid;



events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /home/nginx-1.4.2/logs/access.log  main;
	lua_package_path "/home/lua-resty-redis/lib/?.lua;/mnt/hgfs/vm_shared_files/lua_develop/lua_files/?.lua;";

	lua_code_cache on; 

	lua_shared_dict shared_data 512m;  
	init_by_lua '
		
	';
	
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    server {
        listen       80;
        server_name  localhost;



	
        #charset koi8-r;
		 
		
        #access_log  logs/host.access.log  main;

        #location / {
            #root   /home/nginx-1.4.2/html;
            #index  index.html;
        #}

		
		location = /hello.do {
      		default_type 'text/plain';
      		
		 	content_by_lua_file /mnt/hgfs/vm_shared_files/lua_develop/lua_files/hello.lua;
       
		}
		
		location = /test-redis {
				default_type 'text/html';
               content_by_lua '
               
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379 )
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                
                local res, err = red:auth("redis")
    			if not res then
        			ngx.say("failed to authenticate: ", err)
        			return
    			end
                
                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end
                
                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

 
                local mcat = red:get("cat")
                local mhorse = red:get("horse")
                ngx.say("<br>")                
                ngx.say("<br> red dog: ", red:get("dog"))
                ngx.say("<br> cat: ", mcat)
                ngx.say("<br> horse: ", mhorse)

                ngx.say("<br>---------------")                


                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                
                
                local mcat = red:get("cat")
                local mhorse = red:get("horse")
                ngx.say("<br>")                
                ngx.say("<br> red dog: ", red:get("dog"))
                ngx.say("<br> cat: ", mcat)
                ngx.say("<br> horse: ", mhorse)

                local results, err = red:commit_pipeline()
                
                
                
               		local str = 333
                   ngx.say("Hello World " ,str)
               ngx.log(ngx.ERR, "err err err")
               ';
        }

        location / {
	
				
	
	
    			set $a $1;   
    			set $b $host; 
    			
    			set $jason 'zhuangjiesen';
        
        		set $myuri $uri;
        
        		default_type 'text/html'; 
        		if ( $uri != 'hello' ){
         			
               		content_by_lua_file /mnt/hgfs/vm_shared_files/lua_develop/lua_files/$uri.lua;
       
        		}
        		
        			if ( $uri = '/hello.html' ){
        				access_by_lua '
        					
        					
        					
        					
        					local uri_args = ngx.req.get_uri_args();
        					local name = uri_args["name"];
        					if name == "zhuangjiesen" then
        					
        						return ngx.exit(403);
        					else 
        						local shared_data = ngx.shared.shared_data  
  
								local globalStr = shared_data:get("globalStr")  
								local red = shared_data:get("red")  

								red:set("thums", "i kdsajhkjdash")
								
        						ngx.say(" name is not ... zhuangjiesen <br/> globalStr ï¼š " ,globalStr  );

        					end
        					
           					ngx.say(" name : " , name);

        					ngx.say("hello,xxxxxxx lua")
        				
        				';

        				root   /home/nginx-1.4.2/html;
        			}
        			
        		 
        	}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
